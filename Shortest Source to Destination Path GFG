//20/9/2020

bool visited[25][25];
int k;
int n,m;
int l[]={1,0,-1,0};
int r[]={0,1,0,-1};
struct node
{
    int x,y;
};
bool isvalid(int x,int y)
{
    if(x>=0&&x<n&&y>=0&&y<m&&a[x][y])
    return true;
    return false;
}
int findpath(int x,int y)
{
    node p;
    p.x=0;p.y=0;
    if(a[0][0]==0)
    return -1;
    queue<node> q;
    q.push(p);
    while(!q.empty())
    {
        node g=q.front();
        q.pop();
        visited[g.x][g.y]=true;
        if(g.x==x&&g.y==y)
        {
            return a[g.x][g.y]-1;
        }
        for(int i=0;i<4;i++)
        {
            int c=g.x+l[i],d=g.y+r[i];
            if(isvalid(c,d)&&a[c][d]&&!visited[c][d])
            {
                node t;
                t.x=c;t.y=d;
                if(a[c][d]>a[g.x][g.y]+1)
                a[c][d]=a[g.x][g.y]+1;
                else if(a[c][d]==1)
                a[c][d]=a[g.x][g.y]+1;
                q.push(t);
            }
        }
    }
    return -1;
}
int main()
 {
     int t;
     cin>>t;
     while(t--)
     {
         k=0;
         cin>>n>>m;
         for(int i=0;i<n;i++)
         {
             for(int j=0;j<m;j++)
             {
                 cin>>a[i][j];
                 visited[i][j]=false;
             }
         }
         int x,y;
         cin>>x>>y;
        k=findpath(x,y);
        cout<<k<<"\n";
     }
	//code
	return 0;
}
